# NeoAutomotive Platform - Foundation Build Project Handoff

## Project Overview

We're developing a modern, interactive web application foundation for an automotive dealership intelligence platform. This foundation will support future integration of AI-powered tools for lead management, customer communication, and dealership operations.

Our current focus is building a solid, extensible foundation that can easily accommodate future features without implementing specific business logic yet. This document outlines the technical approach, architecture recommendations, and code examples for implementation.

## Technology Stack

- **Frontend Framework**: React.js
- **CSS Framework**: Tailwind CSS
- **State Management**: React Context API (with architecture ready for Redux)
- **Build System**: Vite.js
- **Animation**: Framer Motion
- **Package Manager**: npm or yarn
- **Language**: TypeScript

## Project Setup & Architecture

```bash
# Initialize project with Vite and TypeScript
npm create vite@latest neoauto-platform -- --template react-ts
cd neoauto-platform

# Install core dependencies
npm install tailwindcss postcss autoprefixer framer-motion react-router-dom

# Initialize Tailwind
npx tailwindcss init -p
```

### Project Structure

```
src/
├── assets/           # Static assets
├── components/       # Component library
│   ├── atoms/        # Basic UI elements
│   ├── molecules/    # Combinations of atoms
│   ├── organisms/    # More complex components
│   └── templates/    # Page layouts
├── context/          # React Context providers
├── hooks/            # Custom React hooks
├── layouts/          # Layout components
├── pages/            # Page components
├── services/         # API service structure
├── styles/           # Global styles
└── utils/            # Utility functions
```

## Core Implementation

### 1. Design System Configuration

```javascript
// tailwind.config.js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',
          100: '#e0f2fe', 
          500: '#0ea5e9',
          900: '#0c4a6e',
        },
        secondary: {
          // Secondary color palette
          300: '#CBD5E1',
          500: '#64748B',
          700: '#334155',
        },
        neutral: {
          // Neutral color palette
          50: '#F8FAFC',
          100: '#F1F5F9',
          800: '#1E293B',
          900: '#0F172A',
        },
      },
      fontSize: {
        'xs': ['0.75rem', { lineHeight: '1rem' }],
        'sm': ['0.875rem', { lineHeight: '1.25rem' }],
        'base': ['1rem', { lineHeight: '1.5rem' }],
        'lg': ['1.125rem', { lineHeight: '1.75rem' }],
        'xl': ['1.25rem', { lineHeight: '1.75rem' }],
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
      },
      borderRadius: {
        'sm': '0.25rem',
        'md': '0.375rem',
        'lg': '0.5rem',
        'xl': '0.75rem',
      },
    }
  },
  plugins: [],
}
```

### 2. Theme Provider Implementation

```tsx
// src/context/ThemeContext.tsx
import React, { createContext, useState, useContext, useEffect } from 'react';

interface ThemeContextType {
  isDarkMode: boolean;
  toggleDarkMode: () => void;
}

const ThemeContext = createContext<ThemeContextType>({
  isDarkMode: false,
  toggleDarkMode: () => {},
});

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(false);

  // Check user preference on mount
  useEffect(() => {
    // Check for saved preference
    const savedTheme = localStorage.getItem('theme');
    
    if (savedTheme === 'dark') {
      setIsDarkMode(true);
    } else if (savedTheme === 'light') {
      setIsDarkMode(false);
    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      // If no saved preference, use system preference
      setIsDarkMode(true);
    }
    
    // Listen for changes in OS theme
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = (e: MediaQueryListEvent) => setIsDarkMode(e.matches);
    mediaQuery.addEventListener('change', handleChange);
    
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, []);

  // Apply theme to body
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  }, [isDarkMode]);

  const toggleDarkMode = () => {
    setIsDarkMode(prev => !prev);
  };

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleDarkMode }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);
```

### 3. Component Examples

#### Button Component

```tsx
// src/components/atoms/Button.tsx
import React from 'react';
import { motion } from 'framer-motion';

type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost';
type ButtonSize = 'sm' | 'md' | 'lg';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: ButtonVariant;
  size?: ButtonSize;
  isLoading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
}

const variants: Record<ButtonVariant, string> = {
  primary: 'bg-primary-500 hover:bg-primary-600 text-white',
  secondary: 'bg-secondary-500 hover:bg-secondary-600 text-white',
  outline: 'border border-primary-500 text-primary-500 hover:bg-primary-50 dark:hover:bg-primary-900',
  ghost: 'text-primary-500 hover:bg-primary-50 dark:hover:bg-primary-900',
};

const sizes: Record<ButtonSize, string> = {
  sm: 'text-sm px-3 py-1',
  md: 'text-base px-4 py-2',
  lg: 'text-lg px-6 py-3',
};

export const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  size = 'md',
  isLoading = false,
  leftIcon,
  rightIcon,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'rounded-md font-medium focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 transition-colors duration-200';
  const variantClasses = variants[variant];
  const sizeClasses = sizes[size];
  
  return (
    <motion.button
      whileTap={{ scale: 0.97 }}
      className={`${baseClasses} ${variantClasses} ${sizeClasses} ${className} ${disabled || isLoading ? 'opacity-60 cursor-not-allowed' : ''}`}
      disabled={disabled || isLoading}
      {...props}
    >
      <div className="flex items-center justify-center space-x-2">
        {isLoading && (
          <svg className="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        )}
        {!isLoading && leftIcon && <span>{leftIcon}</span>}
        <span>{children}</span>
        {!isLoading && rightIcon && <span>{rightIcon}</span>}
      </div>
    </motion.button>
  );
};
```

#### Card Component

```tsx
// src/components/atoms/Card.tsx
import React from 'react';
import { motion } from 'framer-motion';

type CardVariant = 'default' | 'primary' | 'flat';

interface CardProps {
  children: React.ReactNode;
  variant?: CardVariant;
  animate?: boolean;
  className?: string;
  onClick?: () => void;
}

const variants: Record<CardVariant, string> = {
  default: 'bg-white dark:bg-gray-800 shadow-md rounded-lg',
  primary: 'bg-primary-50 dark:bg-primary-900 shadow-md rounded-lg',
  flat: 'bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg',
};

export const Card: React.FC<CardProps> = ({ 
  children, 
  variant = 'default', 
  animate = false,
  className = '',
  onClick,
  ...props 
}) => {
  const baseClass = variants[variant] || variants.default;
  
  const CardElement = animate ? motion.div : 'div';
  
  const animationProps = animate ? {
    whileHover: { y: -5, transition: { duration: 0.2 } },
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.3 }
  } : {};

  return (
    <CardElement 
      className={`${baseClass} p-6 ${className} ${onClick ? 'cursor-pointer' : ''}`}
      onClick={onClick}
      {...animationProps}
      {...props}
    >
      {children}
    </CardElement>
  );
};
```

### 4. Layout Components

#### Sidebar Component

```tsx
// src/components/organisms/Sidebar.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { Link, useLocation } from 'react-router-dom';

interface SidebarItem {
  label: string;
  icon: React.ReactNode;
  path: string;
}

interface SidebarProps {
  collapsed: boolean;
  onToggle: () => void;
  items?: SidebarItem[];
}

export const Sidebar: React.FC<SidebarProps> = ({ 
  collapsed, 
  onToggle,
  items = [] 
}) => {
  const location = useLocation();

  // Default sidebar items if none provided
  const defaultItems: SidebarItem[] = [
    {
      label: 'Dashboard',
      icon: <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z"></path><path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z"></path></svg>,
      path: '/'
    },
    {
      label: 'Leads',
      icon: <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"></path></svg>,
      path: '/leads'
    },
    {
      label: 'Analytics',
      icon: <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path></svg>,
      path: '/analytics'
    },
    {
      label: 'Messages',
      icon: <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z"></path><path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z"></path></svg>,
      path: '/messages'
    },
    {
      label: 'Settings',
      icon: <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fillRule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clipRule="evenodd"></path></svg>,
      path: '/settings'
    },
  ];

  const sidebarItems = items.length > 0 ? items : defaultItems;

  return (
    <motion.aside
      className="bg-gray-800 text-white h-screen flex flex-col"
      animate={{ 
        width: collapsed ? '64px' : '240px' 
      }}
      transition={{ duration: 0.3 }}
    >
      <div className="p-4 flex items-center justify-between">
        {!collapsed && (
          <span className="text-xl font-bold">NeoAuto</span>
        )}
        <button 
          onClick={onToggle}
          className="p-1 rounded-md hover:bg-gray-700 focus:outline-none"
          aria-label={collapsed ? "Expand sidebar" : "Collapse sidebar"}
        >
          <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
            {collapsed ? (
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path>
            ) : (
              <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd"></path>
            )}
          </svg>
        </button>
      </div>
      
      <nav className="flex-1 overflow-y-auto">
        <ul className="py-4">
          {sidebarItems.map((item, index) => (
            <li key={index}>
              <Link 
                to={item.path} 
                className={`flex items-center px-4 py-3 ${location.pathname === item.path ? 'bg-gray-700' : 'hover:bg-gray-700'}`}
              >
                <span>{item.icon}</span>
                {!collapsed && <span className="ml-4">{item.label}</span>}
              </Link>
            </li>
          ))}
        </ul>
      </nav>
    </motion.aside>
  );
};
```

#### Dashboard Layout

```tsx
// src/layouts/DashboardLayout.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Sidebar } from '../components/organisms/Sidebar';
import { Header } from '../components/organisms/Header';

interface DashboardLayoutProps {
  children: React.ReactNode;
}

export const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  
  return (
    <div className="h-screen bg-gray-50 dark:bg-gray-900 flex overflow-hidden">
      <Sidebar 
        collapsed={sidebarCollapsed} 
        onToggle={() => setSidebarCollapsed(prev => !prev)}
      />
      
      <motion.main 
        className="flex-1 flex flex-col overflow-hidden"
        animate={{ 
          marginLeft: sidebarCollapsed ? '64px' : '240px' 
        }}
        transition={{ duration: 0.3 }}
      >
        <Header />
        
        <div className="flex-1 overflow-auto p-6">
          {children}
        </div>
      </motion.main>
    </div>
  );
};
```

### 5. Custom Hook for Data Fetching

```tsx
// src/hooks/useAsync.ts
import { useState, useCallback, useEffect } from 'react';

interface AsyncState<T> {
  status: 'idle' | 'pending' | 'success' | 'error';
  data: T | null;
  error: Error | null;
  isLoading: boolean;
  isSuccess: boolean;
  isError: boolean;
}

export function useAsync<T>(
  asyncFunction: (...args: any[]) => Promise<T>,
  immediate = true,
  ...args: any[]
) {
  const [state, setState] = useState<AsyncState<T>>({
    status: 'idle',
    data: null,
    error: null,
    isLoading: false,
    isSuccess: false,
    isError: false,
  });

  const execute = useCallback(
    async (...executeArgs: any[]) => {
      const argsToUse = executeArgs.length > 0 ? executeArgs : args;
      
      setState({
        status: 'pending',
        data: null,
        error: null,
        isLoading: true,
        isSuccess: false,
        isError: false,
      });

      try {
        const response = await asyncFunction(...argsToUse);
        setState({
          status: 'success',
          data: response,
          error: null,
          isLoading: false,
          isSuccess: true,
          isError: false,
        });
        return response;
      } catch (error) {
        setState({
          status: 'error',
          data: null,
          error: error as Error,
          isLoading: false,
          isSuccess: false,
          isError: true,
        });
        throw error;
      }
    },
    [asyncFunction, ...args]
  );

  useEffect(() => {
    if (immediate) {
      execute();
    }
  }, [execute, immediate]);

  return { ...state, execute };
}
```

### 6. Main App Setup

```tsx
// src/App.tsx
import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { ThemeProvider } from './context/ThemeContext';
import { DashboardLayout } from './layouts/DashboardLayout';

// Lazy-loaded pages for code splitting
const Dashboard = lazy(() => import('./pages/Dashboard'));
const Leads = lazy(() => import('./pages/Leads'));
const Analytics = lazy(() => import('./pages/Analytics'));
const Messages = lazy(() => import('./pages/Messages'));
const Settings = lazy(() => import('./pages/Settings'));
const NotFound = lazy(() => import('./pages/NotFound'));

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <Router>
        <Suspense fallback={
          <div className="h-screen w-screen flex items-center justify-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500"></div>
          </div>
        }>
          <Routes>
            <Route path="/" element={
              <DashboardLayout>
                <Dashboard />
              </DashboardLayout>
            } />
            <Route path="/leads" element={
              <DashboardLayout>
                <Leads />
              </DashboardLayout>
            } />
            <Route path="/analytics" element={
              <DashboardLayout>
                <Analytics />
              </DashboardLayout>
            } />
            <Route path="/messages" element={
              <DashboardLayout>
                <Messages />
              </DashboardLayout>
            } />
            <Route path="/settings" element={
              <DashboardLayout>
                <Settings />
              </DashboardLayout>
            } />
            <Route path="*" element={<NotFound />} />
          </Routes>
        </Suspense>
      </Router>
    </ThemeProvider>
  );
};

export default App;
```

## Additional Technical Recommendations

### 1. Performance Optimization

- Use React.memo for frequently-rendered components
- Implement virtualized lists with `react-window` for large datasets
- Use the `useCallback` and `useMemo` hooks appropriately to prevent unnecessary re-renders
- Optimize images with modern formats (WebP) and responsive loading

### 2. Accessibility

- Ensure all interactive elements have appropriate ARIA roles/attributes
- Implement keyboard navigation support
- Test with screen readers
- Maintain high contrast in all color themes

### 3. Testing Strategy

- Set up Jest and React Testing Library
- Write unit tests for all utility functions
- Create component tests for all reusable UI elements
- Implement Cypress for end-to-end testing

### 4. Development Best Practices

- Use ESLint and Prettier for code formatting and quality
- Set up Git hooks with Husky for pre-commit linting
- Document components with Storybook
- Implement error boundaries to catch and handle runtime errors gracefully

## Final Note

This foundation is designed to be flexible and scalable, accommodating the future addition of complex features like AI-powered lead management, customer communication tools, and advanced data visualizations. The architecture follows best practices for modern React applications, emphasizing modularity, performance, and maintainability.

As you begin to implement specific business logic, the component structure and hooks pattern will make it straightforward to integrate new features without major refactoring.